import React, { useState } from 'react';
import { StyleSheet, ScrollView, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Button, Card, Chip, Text, TextInput, useTheme } from 'react-native-paper';

interface AnalysisResult {
  sentiment: 'positive' | 'neutral' | 'negative';
  keywords: string[];
  summary: string;
}

export const AITextAnalysisScreen: React.FC = () => {
  const theme = useTheme();
  const [text, setText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<AnalysisResult | null>(null);

  const handleAnalyze = async () => {
    if (text.length < 3) {
      setError('Text must be at least 3 characters long');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // TODO: Implement actual AI analysis API call
      // This is a mock implementation
      const mockResult: AnalysisResult = {
        sentiment: 'positive',
        keywords: ['AI', 'analysis', 'text', 'sentiment'],
        summary: 'This is a mock summary of the analyzed text. In a real implementation, this would be generated by an AI model.',
      };

      setResult(mockResult);
    } catch (err) {
      setError('Failed to analyze text. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSave = async () => {
    if (!result) return;

    try {
      // TODO: Implement Firebase save functionality
      console.log('Saving result to Firebase:', result);
    } catch (err) {
      setError('Failed to save result. Please try again.');
    }
  };

  const handleClear = () => {
    setText('');
    setResult(null);
    setError(null);
  };

  const getSentimentEmoji = (sentiment: string) => {
    switch (sentiment) {
      case 'positive':
        return 'ðŸŸ¢';
      case 'neutral':
        return 'ðŸŸ¡';
      case 'negative':
        return 'ðŸ”´';
      default:
        return '';
    }
  };

  return (
    <SafeAreaView 
      style={[styles.container, { backgroundColor: theme.colors.background }]}
      testID="text-analysis-screen"
    >
      <ScrollView 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.header}>
          <Text 
            variant="headlineMedium" 
            style={[styles.title, { color: theme.colors.onSurface }]}
          >
            Text Analysis
          </Text>
          <Text 
            variant="bodyLarge" 
            style={[styles.subtitle, { color: theme.colors.onSurfaceVariant }]}
          >
            Let AI analyze your text for sentiment and meaning
          </Text>
        </View>

        <Card style={styles.inputCard}>
          <Card.Content>
            <TextInput
              label="Paste or write your text"
              value={text}
              onChangeText={setText}
              multiline
              numberOfLines={6}
              style={styles.textInput}
              testID="text-analysis-input"
              mode="outlined"
              outlineColor={theme.colors.outline}
              activeOutlineColor={theme.colors.primary}
            />
          </Card.Content>
        </Card>

        {error && (
          <Text 
            variant="bodyMedium" 
            style={[styles.errorText, { color: theme.colors.error }]}
          >
            {error}
          </Text>
        )}

        <Button
          mode="contained"
          onPress={handleAnalyze}
          loading={isLoading}
          disabled={isLoading || text.length < 3}
          style={styles.analyzeButton}
          testID="text-analysis-submit"
        >
          Analyze
        </Button>

        {result && (
          <Card style={styles.resultCard} testID="text-analysis-result">
            <Card.Content>
              <View style={styles.resultSection}>
                <Text variant="bodyLarge" style={styles.resultLabel}>
                  Sentiment
                </Text>
                <Text 
                  variant="bodyMedium"
                  testID="text-analysis-sentiment"
                >
                  {getSentimentEmoji(result.sentiment)} {result.sentiment.charAt(0).toUpperCase() + result.sentiment.slice(1)}
                </Text>
              </View>

              <View style={styles.resultSection}>
                <Text variant="bodyLarge" style={styles.resultLabel}>
                  Keywords
                </Text>
                <View style={styles.keywordsContainer} testID="text-analysis-keywords">
                  {result.keywords.map((keyword, index) => (
                    <Chip
                      key={index}
                      style={styles.keywordChip}
                      children={keyword}
                    />
                  ))}
                </View>
              </View>

              <View style={styles.resultSection}>
                <Text variant="bodyLarge" style={styles.resultLabel}>
                  Summary
                </Text>
                <Text 
                  variant="bodyMedium"
                  numberOfLines={3}
                  testID="text-analysis-summary"
                >
                  {result.summary}
                </Text>
              </View>
            </Card.Content>
          </Card>
        )}

        <View style={styles.actionsContainer}>
          {result && (
            <Button
              mode="outlined"
              onPress={handleSave}
              icon="content-save"
              style={styles.actionButton}
            >
              Save Result
            </Button>
          )}
          <Button
            mode="outlined"
            onPress={handleClear}
            icon="refresh"
            style={styles.actionButton}
          >
            Clear
          </Button>
          <Button
            mode="outlined"
            onPress={() => {}}
            icon="arrow-left"
            style={styles.actionButton}
          >
            Back
          </Button>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
  },
  header: {
    marginBottom: 24,
  },
  title: {
    marginBottom: 8,
  },
  subtitle: {
    opacity: 0.7,
  },
  inputCard: {
    marginBottom: 16,
  },
  textInput: {
    backgroundColor: 'transparent',
  },
  errorText: {
    marginBottom: 16,
  },
  analyzeButton: {
    marginBottom: 24,
  },
  resultCard: {
    marginBottom: 24,
  },
  resultSection: {
    marginBottom: 16,
  },
  resultLabel: {
    marginBottom: 8,
    opacity: 0.7,
  },
  keywordsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  keywordChip: {
    marginRight: 8,
    marginBottom: 8,
  },
  actionsContainer: {
    gap: 12,
  },
  actionButton: {
    width: '100%',
  },
}); 